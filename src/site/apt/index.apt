 ----
 e3: Entropy Extracting Executor
 ----
 Haruaki Tamada
 ----
 2012-04-08
 ----

{Overview}

 e3は実行時にどの命令が何度くらい実行されるのか，また，それらの命令がど
のような順番で実行されるのかを計測するためのツールです．

 このツールは難読化手法などの評価に使われます．もし，プログラムのエント
ロピーが最大ならば，全ての命令が万遍なく出現していることになります．計
測対象プログラムがどのくらいのエントロピーであるのかを計測するのがこの
ツールの目的です．

*{Features}

 このツールでは，以下のことが行えます．

 * 実行時の命令の頻度を計測し，それを基にエントロピーとコルモゴロフ複雑度を計算します．

   * 上記の計算が行えるよう予めプログラムを変換しておきます．実行時には本ツールがクラスパスに含まれている必要があります．

   * 実行時に動的にプログラムを変換します．通常のJavaプログラムの実行方法に少しのオプションを追加するだけで計測可能になります．

 * 静的にプログラムを解析し，出現した命令の頻度を基にエントロピーとコルモゴロフ複雑度を計算します．

{Measurement}

 プログラム終了時に計測結果を標準出力にCSV形式で出力します．出力内容は
インストラクションの実行トレースと，その頻度，そして，エントロピーの計
算結果です．

 本ツールでは，実行されたインストラクションの計測・収集のために，コード
をクラスファイルに埋め込みます．例として，以下のHelloWorldで説明します．

----
public class HelloWorld{
    public static void main(String[] args){
        System.out.println("Hello World");
    }
}
----

 このプログラムをコンパイルすると，以下のようなバイトコードに変換されま
す．コンスタントプールは省略しています．

----
public HelloWorld()
  Code:
   0:   aload_0
   1:   invokespecial   #1; //Method java/lang/Object."<init>":()V
   4:   return

public static void main(java.lang.String[]);
  Code:
   0:   getstatic       #2; //Field java/lang/System.out:Ljava/io/PrintStream;
   3:   ldc     #3; //String Hello World
   5:   invokevirtual   #4; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   8:   return
----

 このツールは上記バイトコードの命令1つずつ集計のためのメソッド呼び出し
を加えていきます．

----
public HelloWorld()
  Code:
   0:   ldc     #7; //String HelloWorld
   2:   ldc     #8; //String <init>
   4:   invokestatic    #14; //Method jp/cafebabe/e3/EntropyCounterManager.entryMethod:(Ljava/lang/String;Ljava/lang/String;)V
   7:   invokestatic    #17; //Method jp/cafebabe/e3/EntropyCounterManager.aload:()V
   10:  aload_0
   11:  invokestatic    #20; //Method jp/cafebabe/e3/EntropyCounterManager.invokespecial:()V
   14:  invokespecial   #22; //Method java/lang/Object."<init>":()V
   17:  invokestatic    #25; //Method jp/cafebabe/e3/EntropyCounterManager.returnMethod:()V
   20:  invokestatic    #28; //Method jp/cafebabe/e3/EntropyCounterManager.returnInsn:()V
   23:  return

public static void main(java.lang.String[]);
  Code:
   0:   ldc     #7; //String HelloWorld
   2:   ldc     #31; //String main
   4:   invokestatic    #14; //Method jp/cafebabe/e3/EntropyCounterManager.entryMethod:(Ljava/lang/String;Ljava/lang/String;)V
   7:   invokestatic    #34; //Method jp/cafebabe/e3/EntropyCounterManager.getstatic:()V
   10:  getstatic       #40; //Field java/lang/System.out:Ljava/io/PrintStream;
   13:  invokestatic    #43; //Method jp/cafebabe/e3/EntropyCounterManager.ldc:()V
   16:  ldc     #45; //String Hello World
   18:  invokestatic    #48; //Method jp/cafebabe/e3/EntropyCounterManager.invokevirtual:()V
   21:  invokevirtual   #54; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
   24:  invokestatic    #25; //Method jp/cafebabe/e3/EntropyCounterManager.returnMethod:()V
   27:  invokestatic    #28; //Method jp/cafebabe/e3/EntropyCounterManager.returnInsn:()V
   30:  return
----

 プログラムが終了するときに，今まで集計した結果を出力します．上記の例で
あれば，以下のような出力になります．

----
Hello World
########### execution trace (class,method,opcode,name,line) #############
HelloWorld,main,178,getstatic,3
HelloWorld,main,18,ldc,3
HelloWorld,main,182,invokevirtual,3
HelloWorld,main,177,return,4
################ frequency of trace (opcode,name,count) #################
18,ldc,1
177,return,1
178,getstatic,1
182,invokevirtual,1
##################### entropy (class,method,entropy) #####################
HelloWorld,main,2.0
<whole-sequence>,<entire>,2.0
########## kolmogorov complexity (algorithm,after,before,rate) ##########
deflate,12,4,3.000000
----

 出力は大きく5つの区画に分けられ，それぞれ#で囲まれたラベルで区切られて
います．一番最初の区画は，そのプログラムの出力です．e3で変換しなかった
場合に出力される内容と同じものです．

 次の区画は，実行トレースが出力されます．この出力は実行されたopcode が
実行された順序で１行ずつ出力されます．出力内容は，opcode とそれに対応す
る名前，そのopcodeが実行されたクラスとメソッドの名前，そして，ソースコー
ド状の行数です．これらの情報が1行に出力されています．もし，ソースコード
行数が取得できない場合（デバッグ情報が含まれていない場合）は-1が出力さ
れます．

 3つ目の区画は実行頻度が出力されます．opcode の番号順に opcode，それに
対応する名前，実行された回数が１行で出力されます．ここに出力される行数
が，当該プログラムで使用されている命令一覧になります．クラス名が
<whole-sequence>となっている行は，execution trace区画に表示されている全
てのシーケンスを基に計算したエントロピーです．

 4つ目の区画は以下の式で表される以下の計算式に基づいて，平均情報量が出
力されます．メソッドごとの実行系列をもとにエントロピーが計算され，最後
に実行系列全体をもとにしたエントロピーが計算されます．

[images/entropy.png]

 最後の区画は，コルモゴロフ複雑度を出力します．この複雑度は以下の式で定
義されますが，計算できないため，圧縮率でコルモゴロフ複雑度を示していま
す．圧縮するデータは，execution trace で出力されたcsvのうち，一番最初の
値(opcodeの数値)です．上記の例の場合，<<<new byte[] { 178, 18, 182,
177 }>>> のバイト配列が圧縮元のデータとなります．出力内容は，圧縮アルゴ
リズム，圧縮後のサイズ，圧縮前のサイズ，圧縮率(圧縮後のサイズを圧縮前の
サイズで割ったもの)形式です．圧縮アルゴリズムにより複雑度が変わってくる
ため，様々な圧縮アルゴリズムを用いて測定する必要があるでしょう．

[images/kolmogorov.png]

 e3は計測結果の出力にJavaのシャットダウンフックを利用しています．そのた
め，計測対象プログラムがシャットダウンフックを利用したものであれば，正
常に計測できない可能性（実行の度に値が変わるなど）があります．また，仮
想マシンが異常終了した場合（SIGKILLシグナルを仮想マシンが受け取った場合
など）は，シャットダウンフックが実行されない場合があり，結果が出力され
ない可能性があります．

{Requirements}

 このツールは以下のライブラリを使用しています．e3-1.2.jar と同じディレ
クトリに置いておけば自動的にクラスパスが設定されます．

 * {{{http://asm.ow2.org/}ASM 4.0}} (asm-4.0.jar) 
   バイトコードの書換に用いています

{Install}

 以下のコマンドを実行すると，必要なファイルをインターネットからダウンロー
ド，ソースコードのコンパイル，クラスファイルのパッケージングを行います．
ただし，Maven 3を予めインストールしておかなくてはなりません．また，
Maven 3の初回実行時は時間がかかります．

--------
$ mvn package
--------

{Contact}

 〒603-8555 京都市北区上賀茂本山

 京都産業大学 コンピュータ理工学部

 玉田 春昭

[images/mailaddress.png]